export class DebugContext {
    constructor(element, componentElement, directive, context, locals, injector) {
        this.element = element;
        this.componentElement = componentElement;
        this.directive = directive;
        this.context = context;
        this.locals = locals;
        this.injector = injector;
    }
}
export class ChangeDetectorGenConfig {
    constructor(genDebugInfo, logBindingUpdate, useJit) {
        this.genDebugInfo = genDebugInfo;
        this.logBindingUpdate = logBindingUpdate;
        this.useJit = useJit;
    }
}
export class ChangeDetectorDefinition {
    constructor(id, strategy, variableNames, bindingRecords, eventRecords, directiveRecords, genConfig) {
        this.id = id;
        this.strategy = strategy;
        this.variableNames = variableNames;
        this.bindingRecords = bindingRecords;
        this.eventRecords = eventRecords;
        this.directiveRecords = directiveRecords;
        this.genConfig = genConfig;
    }
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW50ZXJmYWNlcy5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbImFuZ3VsYXIyL3NyYy9jb3JlL2NoYW5nZV9kZXRlY3Rpb24vaW50ZXJmYWNlcy50cyJdLCJuYW1lcyI6WyJEZWJ1Z0NvbnRleHQiLCJEZWJ1Z0NvbnRleHQuY29uc3RydWN0b3IiLCJDaGFuZ2VEZXRlY3RvckdlbkNvbmZpZyIsIkNoYW5nZURldGVjdG9yR2VuQ29uZmlnLmNvbnN0cnVjdG9yIiwiQ2hhbmdlRGV0ZWN0b3JEZWZpbml0aW9uIiwiQ2hhbmdlRGV0ZWN0b3JEZWZpbml0aW9uLmNvbnN0cnVjdG9yIl0sIm1hcHBpbmdzIjoiQUFNQTtJQUNFQSxZQUFtQkEsT0FBWUEsRUFBU0EsZ0JBQXFCQSxFQUFTQSxTQUFjQSxFQUNqRUEsT0FBWUEsRUFBU0EsTUFBV0EsRUFBU0EsUUFBYUE7UUFEdERDLFlBQU9BLEdBQVBBLE9BQU9BLENBQUtBO1FBQVNBLHFCQUFnQkEsR0FBaEJBLGdCQUFnQkEsQ0FBS0E7UUFBU0EsY0FBU0EsR0FBVEEsU0FBU0EsQ0FBS0E7UUFDakVBLFlBQU9BLEdBQVBBLE9BQU9BLENBQUtBO1FBQVNBLFdBQU1BLEdBQU5BLE1BQU1BLENBQUtBO1FBQVNBLGFBQVFBLEdBQVJBLFFBQVFBLENBQUtBO0lBQUdBLENBQUNBO0FBQy9FRCxDQUFDQTtBQStCRDtJQUNFRSxZQUFtQkEsWUFBcUJBLEVBQVNBLGdCQUF5QkEsRUFDdkRBLE1BQWVBO1FBRGZDLGlCQUFZQSxHQUFaQSxZQUFZQSxDQUFTQTtRQUFTQSxxQkFBZ0JBLEdBQWhCQSxnQkFBZ0JBLENBQVNBO1FBQ3ZEQSxXQUFNQSxHQUFOQSxNQUFNQSxDQUFTQTtJQUFHQSxDQUFDQTtBQUN4Q0QsQ0FBQ0E7QUFFRDtJQUNFRSxZQUFtQkEsRUFBVUEsRUFBU0EsUUFBaUNBLEVBQ3BEQSxhQUF1QkEsRUFBU0EsY0FBK0JBLEVBQy9EQSxZQUE2QkEsRUFBU0EsZ0JBQW1DQSxFQUN6RUEsU0FBa0NBO1FBSGxDQyxPQUFFQSxHQUFGQSxFQUFFQSxDQUFRQTtRQUFTQSxhQUFRQSxHQUFSQSxRQUFRQSxDQUF5QkE7UUFDcERBLGtCQUFhQSxHQUFiQSxhQUFhQSxDQUFVQTtRQUFTQSxtQkFBY0EsR0FBZEEsY0FBY0EsQ0FBaUJBO1FBQy9EQSxpQkFBWUEsR0FBWkEsWUFBWUEsQ0FBaUJBO1FBQVNBLHFCQUFnQkEsR0FBaEJBLGdCQUFnQkEsQ0FBbUJBO1FBQ3pFQSxjQUFTQSxHQUFUQSxTQUFTQSxDQUF5QkE7SUFBR0EsQ0FBQ0E7QUFDM0RELENBQUNBO0FBQUEiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQge0xvY2Fsc30gZnJvbSAnLi9wYXJzZXIvbG9jYWxzJztcbmltcG9ydCB7QmluZGluZ1RhcmdldCwgQmluZGluZ1JlY29yZH0gZnJvbSAnLi9iaW5kaW5nX3JlY29yZCc7XG5pbXBvcnQge0RpcmVjdGl2ZUluZGV4LCBEaXJlY3RpdmVSZWNvcmR9IGZyb20gJy4vZGlyZWN0aXZlX3JlY29yZCc7XG5pbXBvcnQge0NoYW5nZURldGVjdGlvblN0cmF0ZWd5fSBmcm9tICcuL2NvbnN0YW50cyc7XG5pbXBvcnQge0NoYW5nZURldGVjdG9yUmVmfSBmcm9tICcuL2NoYW5nZV9kZXRlY3Rvcl9yZWYnO1xuXG5leHBvcnQgY2xhc3MgRGVidWdDb250ZXh0IHtcbiAgY29uc3RydWN0b3IocHVibGljIGVsZW1lbnQ6IGFueSwgcHVibGljIGNvbXBvbmVudEVsZW1lbnQ6IGFueSwgcHVibGljIGRpcmVjdGl2ZTogYW55LFxuICAgICAgICAgICAgICBwdWJsaWMgY29udGV4dDogYW55LCBwdWJsaWMgbG9jYWxzOiBhbnksIHB1YmxpYyBpbmplY3RvcjogYW55KSB7fVxufVxuXG5leHBvcnQgaW50ZXJmYWNlIENoYW5nZURpc3BhdGNoZXIge1xuICBnZXREZWJ1Z0NvbnRleHQoZWxlbWVudEluZGV4OiBudW1iZXIsIGRpcmVjdGl2ZUluZGV4OiBEaXJlY3RpdmVJbmRleCk6IERlYnVnQ29udGV4dDtcbiAgbm90aWZ5T25CaW5kaW5nKGJpbmRpbmdUYXJnZXQ6IEJpbmRpbmdUYXJnZXQsIHZhbHVlOiBhbnkpOiB2b2lkO1xuICBsb2dCaW5kaW5nVXBkYXRlKGJpbmRpbmdUYXJnZXQ6IEJpbmRpbmdUYXJnZXQsIHZhbHVlOiBhbnkpOiB2b2lkO1xuICBub3RpZnlBZnRlckNvbnRlbnRDaGVja2VkKCk6IHZvaWQ7XG4gIG5vdGlmeUFmdGVyVmlld0NoZWNrZWQoKTogdm9pZDtcbn1cblxuZXhwb3J0IGludGVyZmFjZSBDaGFuZ2VEZXRlY3RvciB7XG4gIHBhcmVudDogQ2hhbmdlRGV0ZWN0b3I7XG4gIG1vZGU6IENoYW5nZURldGVjdGlvblN0cmF0ZWd5O1xuICByZWY6IENoYW5nZURldGVjdG9yUmVmO1xuXG4gIGFkZENvbnRlbnRDaGlsZChjZDogQ2hhbmdlRGV0ZWN0b3IpOiB2b2lkO1xuICBhZGRWaWV3Q2hpbGQoY2Q6IENoYW5nZURldGVjdG9yKTogdm9pZDtcbiAgcmVtb3ZlQ29udGVudENoaWxkKGNkOiBDaGFuZ2VEZXRlY3Rvcik6IHZvaWQ7XG4gIHJlbW92ZVZpZXdDaGlsZChjZDogQ2hhbmdlRGV0ZWN0b3IpOiB2b2lkO1xuICByZW1vdmUoKTogdm9pZDtcbiAgaHlkcmF0ZShjb250ZXh0OiBhbnksIGxvY2FsczogTG9jYWxzLCBkaXJlY3RpdmVzOiBhbnksIHBpcGVzOiBhbnkpOiB2b2lkO1xuICBkZWh5ZHJhdGUoKTogdm9pZDtcbiAgbWFya1BhdGhUb1Jvb3RBc0NoZWNrT25jZSgpOiB2b2lkO1xuXG4gIGhhbmRsZUV2ZW50KGV2ZW50TmFtZTogc3RyaW5nLCBlbEluZGV4OiBudW1iZXIsIGxvY2FsczogTG9jYWxzKTtcbiAgZGV0ZWN0Q2hhbmdlcygpOiB2b2lkO1xuICBjaGVja05vQ2hhbmdlcygpOiB2b2lkO1xufVxuXG5leHBvcnQgaW50ZXJmYWNlIFByb3RvQ2hhbmdlRGV0ZWN0b3IgeyBpbnN0YW50aWF0ZShkaXNwYXRjaGVyOiBDaGFuZ2VEaXNwYXRjaGVyKTogQ2hhbmdlRGV0ZWN0b3I7IH1cblxuZXhwb3J0IGNsYXNzIENoYW5nZURldGVjdG9yR2VuQ29uZmlnIHtcbiAgY29uc3RydWN0b3IocHVibGljIGdlbkRlYnVnSW5mbzogYm9vbGVhbiwgcHVibGljIGxvZ0JpbmRpbmdVcGRhdGU6IGJvb2xlYW4sXG4gICAgICAgICAgICAgIHB1YmxpYyB1c2VKaXQ6IGJvb2xlYW4pIHt9XG59XG5cbmV4cG9ydCBjbGFzcyBDaGFuZ2VEZXRlY3RvckRlZmluaXRpb24ge1xuICBjb25zdHJ1Y3RvcihwdWJsaWMgaWQ6IHN0cmluZywgcHVibGljIHN0cmF0ZWd5OiBDaGFuZ2VEZXRlY3Rpb25TdHJhdGVneSxcbiAgICAgICAgICAgICAgcHVibGljIHZhcmlhYmxlTmFtZXM6IHN0cmluZ1tdLCBwdWJsaWMgYmluZGluZ1JlY29yZHM6IEJpbmRpbmdSZWNvcmRbXSxcbiAgICAgICAgICAgICAgcHVibGljIGV2ZW50UmVjb3JkczogQmluZGluZ1JlY29yZFtdLCBwdWJsaWMgZGlyZWN0aXZlUmVjb3JkczogRGlyZWN0aXZlUmVjb3JkW10sXG4gICAgICAgICAgICAgIHB1YmxpYyBnZW5Db25maWc6IENoYW5nZURldGVjdG9yR2VuQ29uZmlnKSB7fVxufVxuIl19